module Zwana where

import fregefx.JavaFxType
import fregefx.JavaFxAll hiding (ListView, Rectangle)
import fregefx.JavaFxUtils

import Data.List
import Prelude.Math


type Note = Int

-- fregeFX classes

-- reimplement Rectangle to add listeners
data Rectangle = mutable native javafx.scene.shape.Rectangle where
    native setOnMouseClicked :: Rectangle -> EventHandler MouseEvent -> JFX ()
    native setOnMousePressed :: Rectangle -> EventHandler MouseEvent -> JFX ()
    native setOnMouseReleased :: Rectangle -> EventHandler MouseEvent -> JFX ()

data MouseEvent = native javafx.scene.input.MouseEvent

instance CastTarget Rectangle where
    native downcast "(javafx.scene.shape.Rectangle)" :: Node -> JFX (ClassCastException | Rectangle )

instance CastTarget TextField where
    native downcast "(javafx.scene.control.TextField)" :: Node -> JFX (ClassCastException | TextField )

instance CastTarget Slider where
    native downcast "(javafx.scene.control.Slider)" :: Node -> JFX (ClassCastException | Slider )

data TextField = mutable native javafx.scene.control.TextField where
    native getText :: TextField -> IO String
    native setOnAction :: TextField -> EventHandler ActionEvent -> JFX ()

data Slider = mutable native javafx.scene.control.Slider where
    native getValue :: Slider -> IO Double
    native increment :: Slider -> JFX ()

-- java sound classes
data MidiSystem = native javax.sound.midi.MidiSystem where 
    native getSynthesizer "javax.sound.midi.MidiSystem.getSynthesizer" :: () -> STMutable s Synthesizer throws MidiUnavailableException

data InvalidMidiDataException = native javax.sound.midi.InvalidMidiDataException
derive Exceptional InvalidMidiDataException

data Patch = pure native javax.sound.midi.Patch where
    pure native getProgram :: Patch -> Int

data Instrument = pure native javax.sound.midi.Instrument where
    native toString :: Instrument -> ST s String
    native getPatch :: Instrument -> ST s Patch
derive ArrayElement Instrument

data MidiChannel = pure native javax.sound.midi.MidiChannel where
    native noteOn :: MidiChannel -> Int -> Int -> IO ()
    native noteOff :: MidiChannel -> Int -> IO ()
    native programChange :: MidiChannel -> Int -> IO ()

derive ArrayElement MidiChannel

data Synthesizer = native javax.sound.midi.Synthesizer where
    native open :: MutableIO Synthesizer -> IO () throws MidiUnavailableException
    native getChannels :: Mutable s Synthesizer -> STMutable s (JArray MidiChannel)
    native getAvailableInstruments :: Mutable s Synthesizer -> STMutable s (JArray Instrument)
    native loadInstrument :: Mutable s Synthesizer -> Instrument -> ST s Bool

data MidiUnavailableException = native javax.sound.midi.MidiUnavailableException
derive Exceptional MidiUnavailableException

-- utility functions

toInt :: String -> Int
toInt x = either (const 0) id x.int

truncate :: Double -> Int
truncate n = let n' = round n
             in if ( n'.double > n ) then (n' - 1).int else (n').int

-- main and GUI

main :: IO ()
main = do
    FregeFX.launch $ withStage buildUI


buildUI :: Family a => a -> Stage -> JFX a
buildUI root stage = do
    stage.setTitle "Zwana"
    content <- FregeFX.fxml "Zwana" "/Zwana.fxml"
    scene <- Scene.new content 571.0 318.0
    i <- lookupNode scene "#inputInstrument" :: JFX TextField
    o <- lookupNode scene "#sliderOctave" :: JFX Slider
    v <- lookupNode scene "#sliderVolume" :: JFX Slider
    onKeyPressed scene i o v
    let keys = zip [0..] (map (\x -> lookupNode scene x :: JFX Rectangle) notes)
    forM_ keys (\ (k, note) -> note >>= (\n -> n.setOnMousePressed (onAction (\ _ -> (processNote i o v k) `thenDo` noAction) ) ) )
    stage.setScene scene
    stage.setResizable False
    Stage.show stage
    return root

--  dummy function to take an action from the IO monad to the JFX monad
noAction :: () -> JFX ()
noAction f = return ()

onKeyPressed :: Scene -> TextField -> Slider -> Slider -> JFX ()
onKeyPressed scene i o v = do
    scene.setOnKeyPressed (onAction go) 
   where
    go k = do
        keyName <- getKeyName k
        case (fromKey keyName) of
            (Just key) -> (processNote i o v key) `thenDo` noAction
            Nothing    -> return () 

processNote :: TextField -> Slider -> Slider -> Note -> IO ()
processNote i o v n = do
    instr <- instrument i
    oct <- getSilderValue o
    vol <- getSilderValue v
    playNote instr oct vol n

getKeyName :: KeyEvent -> JFX String
getKeyName k = do
    keyCode <- k.getCode
    keyName <- KeyCode.getName keyCode
    return keyName

keyboardNotes :: [String]
keyboardNotes = ["Z", "S", "X", "D", "C", "V", "G", "B", "H", "N", "J", "M", "Comma", "Q", "2", "W", "3", "E", "R", "5", "T", "6", "Y", "7", "U", "I"]

fromKey :: String -> Maybe Note
fromKey s = lookup s (zip keyboardNotes [0..])

-- sound functions
instrument :: TextField -> IO Int
instrument i = liftM toInt i.getText

getSilderValue :: Slider -> IO Int
getSilderValue o = liftM truncate o.getValue

playNote :: Int -> Int -> Int-> Note -> IO ()
playNote i o v n = do
    let note = o * 12 + n
    synthesizer <- MidiSystem.getSynthesizer ()
    synthesizer.open
    instruments <- synthesizer.getAvailableInstruments
    channels <- synthesizer.getChannels
    firstChannel <- getElemAt channels 0
    instr <- getElemAt instruments i
    patch <- instr.getPatch
    firstChannel.programChange patch.getProgram
    loaded <- synthesizer.loadInstrument instr
    firstChannel.noteOn note v
    Thread.sleep 1000
    firstChannel.noteOff note

notes :: [String]
notes = ["#keyC","#keyCSharp","#keyD","#keyDSharp","#keyE","#keyF","#keyFSharp","#keyG","#keyGSharp","#keyA","#keyASharp","#keyB", "#keyCUp"]
